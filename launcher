#!/usr/bin/python
import encodings
import hashlib
import json 
import os
import platform
import shlex
import sys
import tempfile
import time
import traceback
import urllib2
import tarfile
import zipfile

import tkMessageBox
import tkFileDialog
import tkFont
import ttk
import Tkinter as tk

from subprocess import Popen, PIPE
from pkg_resources import parse_version

API_ENDPOINT = "https://arena.sh"
VERSION = "0.2.1"
DEBUG=0
T = None
root = None
dl_win = None
pb = None
progress_txt = None
dl_active = False
run_after_dl = False
OS = "n/a"
cmd_data = None
dl_data = None

def print_log(msg):
    if T:
        time.sleep(0.1)
        T.insert(tk.END, str(msg)+"\n\n")
        T.see(tk.END)
        root.update()

def debug_log(msg):
    if DEBUG:
        print_log(msg)

def center_window(window, offset_x=0, offset_y=0):
    window.withdraw()
    window.update_idletasks()  # update "requested size" from geometry manager
    x = (window.winfo_screenwidth() - root.winfo_reqwidth()) / 2 + offset_x
    y = (window.winfo_screenheight() - root.winfo_reqheight()) / 2 + offset_y
    window.geometry("+%d+%d" % (x, y))
    window.deiconify()

# run the command
def run_bash(cmd, pipe=PIPE):
    print_log("Running:\n" + cmd)

    if OS == 'windows':
        cmd_file = tempfile.gettempdir() + "/cmd.ps1"
        with open(cmd_file,"w") as f:
            f.write(cmd)
        cmd = "powershell -executionpolicy bypass -file " + cmd_file

    s = Popen(cmd,stdout=pipe,stdin=pipe,stderr=pipe,shell=True)
    output,error = s.communicate()
    debug_log("output:\n"+ output + "\n")
    debug_log("error:\n"+ error + "\n")
    debug_log("return code:\n"+ str(s.returncode))
    return output,error,s

def detect_symlinks():
    target = "~/games/"
    link_type = "symlink"
    if OS == "windows":
        target = "c:\games\\"
        link_type = "junction"
    elif OS == "macosx":
        target = "/Applications/games/"

    detected = []
    if os.path.exists(target):
        for p in os.listdir(target):
            if p.startswith("arena-sh-"):
                detected.append(target+p)
    if detected:
        print_log("Configured game %ss:\n%s" % (link_type, "\n".join(sorted(detected))))

def launcher_wrapper():
    try:
        launcher()
        T.unbind("<Key>")
        T.bind("<Key>", anykey_exit)
        print_log("Hit any key to exit...")
        T.focus_set()
    except Exception as e:
        exc_type, exc_value, exc_traceback = sys.exc_info()
        print_log("".join(traceback.format_exception(exc_type, exc_value, exc_traceback)))

def launcher():
    global dl_data
    global cmd_data
    global OS

    # check platform
    p = platform.system()
    if p == "Darwin":
        OS = "macosx"
    elif p == "Linux":
        OS = "linux"
    elif p.startswith('Win'):
        OS = "windows"

    debug_log("OS detected as: " + OS)
    print_log("Version: " + VERSION)

    if OS == 'macosx': 
        from Cocoa import NSRunningApplication, NSApplicationActivateIgnoringOtherApps
        app = NSRunningApplication.runningApplicationWithProcessIdentifier_(os.getpid())
        app.activateWithOptions_(NSApplicationActivateIgnoringOtherApps)
    else:
        if OS == 'windows':
            dirname, filename = os.path.split(sys.argv[0])
            root.iconbitmap(dirname+'\\app.ico')
        root.lift()
        root.call('wm', 'attributes', '.', '-topmost', True)
        root.after_idle(root.call, 'wm', 'attributes', '.', '-topmost', False)

    if len(sys.argv) < 2:
        print_log("Please start this launcher by clicking \"JOIN\" at any server page.")
        print_log("Visit https://arena.sh/ to browse games!")
        return

    # show symlinks
    detect_symlinks()

    # check args
    join_url = sys.argv[1]

    debug_log("args: "  + str(sys.argv))
    join_url = join_url.replace('arena://','',1)
    items = join_url.split('/')
    game_id = items[0]
    params = {}
    for item in items[1:]:
        key, val = item.split('_',1)
        val = val.replace('%2F', '/')
        params.update({key:val})
    debug_log("params: " + str(params))
    sha1 = params["sha1"]
    del params['sha1']
    token = ""
    if "token" in params:
        token = params["token"]
        del params['token']

    # send back rest for customization
    rest = ""
    for key,val in params.items():
        rest += "&" + str(key) + "=" + str(val)

    # request the command
    req_url = API_ENDPOINT + "/cli/game/" + game_id + "/?os=" + OS + rest
    debug_log("request to " +  req_url)
    response = urllib2.urlopen(req_url)
    cmd_data = json.loads(response.read())
    debug_log(cmd_data)

    # check launcher version
    if parse_version(VERSION) < parse_version(cmd_data["ln_ver_current"]):
        print_log("Newer version (%s) for the launcher is available." % cmd_data["ln_ver_current"])

    if parse_version(VERSION) < parse_version(cmd_data["ln_ver_min"]):
        print_log("Minimum version of launcher should be %s to run this game \ncorrectly. Please update your launcher." % cmd_data["ln_ver_min"])
        return

    # check hash of command before run
    cmd_sha1 = hashlib.sha1(cmd_data['cmd']).hexdigest()
    if sha1 == cmd_sha1:
        print_log("Command hash is correct (sha1)")
    else:
        print_log("Incorrect command hash.")
        return


    if token:
        cmd_data['cmd'] = cmd_data['cmd'].replace('TOKEN_HERE', token, 1)

    output,error,s = run_bash(cmd_data["cmd"])

    # just quit if it's a lib error
    first_line = "".join(error.splitlines()[:1])
    if "No such file" in first_line or "cannot be run" in first_line:
        firstline = ""

    if first_line and "shared lib" in first_line: # dependency issue
        print_log(error)
    elif s.returncode != 0 or (OS == 'windows' and error): # not found
        print_log("Checking for download...")
        game_code = cmd_data["game_code"]

        req_url = API_ENDPOINT+"/cli/game-dl/"+game_code+"/?os="+OS
        debug_log("request to " +  req_url)
        response = urllib2.urlopen(req_url)
        dl_data = json.loads(response.read())

        # testing purposes
        # dl_data["dl_link"] = "https://file-examples.com/wp-content/uploads/2017/02/zip_2MB.zip"
        # dl_data["sha256"] = "894cca19bba2a6bc496bf72176630083443c951f9e62d4aa328180474a32e9c9"
        # dl_data["dl_link"] = "https://dev-files.blender.org/file/download/bwdp5reejwpkuh5i2oak/PHID-FILE-nui3bpuan4wdvd7yzjrs/sample.tar.gz"
        # dl_data["sha256"] = "747b20fc197d680b33d7e6393d8ecd9037210d5fdb7165a702fefb87ae0a8d9a"
        if dl_data["dl_link"]:
            ask_download()
        else:
            no_dl_available_quit()
        

def anykey_exit(event):
    key = event.char
    if key not in ['\x03','c','']: # allow copy text
        root.destroy()

def start_download():
    global dl_win, dl_data, pb, dl_active, run_after_dl, progress_txt
    dl_active = True
    request = urllib2.urlopen(dl_data['dl_link']);
    file_size = int(request.info().getheaders("Content-Length")[0]) 
    file_size_mb = "{0:.1f}".format(float(file_size)/1024.0/1024.0)
    file_name = dl_data['dl_link'].split('/')[-1]
    file_path = tempfile.gettempdir() + '/' + file_name
    print_log("Downloading %s to %s" % (dl_data['dl_link'], file_path))
    file = open(file_path, 'wb')
    size = 0
    block_sz = 8192
    percentage = 0
    while True and dl_active:
        buffer = request.read(block_sz)
        if not buffer:
            break
        size += len(buffer)
        percentage = int((float(size)/float(file_size))*100.0)
        file.write(buffer)
        # following causes 0.1 delay, only use it with test data
        # debug_log("Downloading: " + str(percentage) + "%\t\t\r")
        pb["value"]=percentage
        size_formatted = "{0:.1f}".format(float(size)/1024.0/1024.0)
        progress_txt.config(text="%s MB / %s MB" % (size_formatted, file_size_mb))
        dl_win.update()
    file.close()

    dl_win.quit()
    dl_win.destroy()

    if percentage == 100:
        print_log("Download complete.") 

        print_log("Verifying checksum...")

        BUF_SIZE = 65536 
        sha256 = hashlib.sha256()

        with open(file_path, 'rb') as f:
            while True:
                data = f.read(BUF_SIZE)
                if not data:
                    break
                sha256.update(data)

        if dl_data['sha256'] != sha256.hexdigest():
            print_log("Downloaded file doesn't match with the expected sha256. It might be damaged during transfer or file owner has modified the file.")
            print_log("File: %s\n\nSha256 expected:\n%s\n\nSha256 found:\n%s" % (file_path, dl_data['sha256'], sha256.hexdigest()))
            print_log("Exiting.")
            return

        print_log("Checksum complete.")

        zip_ref = ""
        if file_path.endswith('.zip'):
            zip_ref = zipfile.ZipFile(file_path, 'r')
        elif file_path.endswith('.tar.gz'): 
            zip_ref = tarfile.open(file_path,'r')
        dest = os.path.expanduser("~") + "/games/"

        if OS == "macosx": 
            dest = "/Applications/games/"
        elif OS == "windows":
            dest = "c:/games/"

        try:
            os.makedirs(dest)
        except Exception as e:
            pass

        print_log("Extracting to %s..." % dest)
        zip_ref.extractall(dest)
        zip_ref.close()
        print_log("Done.")
    else:
        print_log("Download canceled.")


def cancel_download():
    global dl_active
    dl_active = False

class ChoiceDialog(tk.Toplevel):
    def __init__(self, parent, prompt, file_size_mb):
        tk.Toplevel.__init__(self, parent)
        self.resizable(0,0)
        self.var = tk.IntVar()
        self.var.set(1)
        self.ok_clicked = False
        self.label = tk.Label(self, text=prompt, wraplength=300, justify=tk.LEFT, padx=10, pady=2)
        self.ok_button = ttk.Button(self, text="OK", command=self.on_ok)
        self.cancel_button = ttk.Button(self, text="Cancel", command=self.on_cancel)
        self.label.pack(side="top", fill="x")
	R1 = tk.Radiobutton(self, text="Download (%s MB)" % file_size_mb, variable=self.var, value=1)
	R1.pack(anchor = tk.W, padx=20, pady=2)
	R2 = tk.Radiobutton(self, text="Choose existing", variable=self.var, value=2)
	R2.pack(anchor = tk.W, padx=20)
        self.ok_button.pack(side="right",padx=2,pady=4)
        self.cancel_button.pack(side="right",padx=2, pady=4)
        center_window(self, offset_x=80, offset_y=0)

    def on_ok(self, event=None):
        self.ok_clicked = True
        self.destroy()
        
    def on_cancel(self, event=None):
        self.destroy()

    def show(self):
        self.wm_deiconify()
        self.wait_window()
        if self.ok_clicked:
            return self.var.get()
        return -1

def ask_download():
    global dl_data
    global dl_win
    global pb
    global progress_txt
    global run_after_dl
    request = urllib2.urlopen(dl_data['dl_link'])
    file_size = int(request.info().getheaders("Content-Length")[0]) 
    file_size_mb = "{0:.1f}".format(float(file_size)/1024.0/1024.0)

    choice = ChoiceDialog(root, "Game not found in any of expected directories, you can either download or choose a custom path to continue:", file_size_mb).show()
    run_after_dl = tk.IntVar()
    if choice == 2:
        run_after_dl.set(1)
        answer = tkFileDialog.askdirectory(parent=root, initialdir=os.getcwd(), title="Please select a folder:")
        game_code = cmd_data["game_code"]
        symlink_name = "arena-sh-%s" % game_code
        if OS == "windows":
            os.popen("mkdir c:\games 2> NUL")
            os.popen("rd c:\games\%s 2> NUL" % symlink_name)
            os.popen("mklink /J c:\games\%s \"%s\"" % (symlink_name, answer))
            print_log("Junction is created in c:\games")
        else:
            if OS == "macosx":
                dest = "/Applications/games"
            else:
                dest = "~/games"
            run_bash("mkdir -p %s" % dest) 
            run_bash("rm -rf %s/%s" % (dest, symlink_name))
            run_bash("ln -s %s %s/%s" % (answer, dest, symlink_name))
            print_log("Symlink is created in %s" % dest)
    elif choice == 1:
        run_after_dl.set(0)
        dl_win = tk.Toplevel()
        dl_win.resizable(False, False)
        dl_win.title("Downloading")
        pb = ttk.Progressbar(dl_win, orient="horizontal", length=250, mode="determinate")
        pb["value"]=0
        pb["maximum"]=100
        pb.grid(row=0, columnspan=3, pady=5, padx=40)

        if not dl_data["after_install"]:
            run_after = tk.Checkbutton(dl_win, variable=run_after_dl, text="Run after installation",  onvalue=1, offvalue=0) 
        else:
            run_after = tk.Label(dl_win, text="Please read dependency notes after the installation.")

        run_after.grid(row=1, columnspan=3)

        cancel_button = ttk.Button(dl_win, text="Cancel", command=cancel_download)
        cancel_button.grid(row=2, column=0, pady=4, sticky=tk.E)

        label_font = tkFont.Font(family='Arial', size=12)
        if OS == "windows":
            label_font = tkFont.Font(family='Arial', size=9)

        progress_txt = tk.Label(dl_win, text="0.00 MB / %s MB" % file_size_mb, font=label_font,width=17)
        progress_txt.grid(row=2, column=2, pady=4, sticky=tk.W)

        center_window(dl_win, offset_x=80, offset_y=50)
        dl_win.after(0, start_download) 
        dl_win.mainloop()
    else:
        print_log("No actions to take.")

    if choice != -1:
        debug_log("run after: " + str(run_after_dl.get()))
        if run_after_dl.get():
            output,error,s = run_bash(cmd_data["cmd"])
            if s.returncode != 0 or (OS == 'windows' and error):
                print_log("Game not found.") 
        else:
            if dl_data["after_install"]:
                print_log("After Installation Notes")
                print_log(dl_data["after_install"])
                print_log("You can quit now and join again to see if dependencies are already met.")

def no_dl_available_quit():
    tkMessageBox.showinfo("Manual installation needed", "Game not found in the expected location and universal zip is not available. You can install the game at it's official website.", icon='warning')
    sys.exit(0)

if __name__ == '__main__':
    root = tk.Tk()
    S = tk.Scrollbar(root)
    T = tk.Text(root, height=20, width=70)
    T["bg"] = "#111417"
    T["fg"] = "#EDEFF1"
    S.pack(side=tk.RIGHT, fill=tk.Y)
    T.pack(side=tk.LEFT, fill=tk.Y)
    S.config(command=T.yview)
    T.config(yscrollcommand=S.set)
    T.bind("<Key>", lambda e: "break")
    center_window(root,0,-100)
    root.after(0, launcher_wrapper)
    root.title("arena.sh launcher")
    root.resizable(False, False)
    s = ttk.Style()
    s.theme_use("default")
    s.configure("TProgressbar", thickness=20)
    tk.mainloop()

