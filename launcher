#!/usr/bin/python
import encodings
import hashlib
import json 
import os
import platform
import shlex
import sys
import tempfile
import time
import traceback
import urllib2
import zipfile

import tkMessageBox
import ttk
import Tkinter as tk

from subprocess import Popen, PIPE

API_ENDPOINT = "https://arena.sh"
VERSION = "0.0.1"
DEBUG=0
T = None
root = None
dl_win = None
pb = None
dl_active = False
run_after_dl = False
OS = "n/a"
cmd_data = None
dl_data = None

def print_log(msg):
    print(msg)
    if T:
        time.sleep(0.1)
        T.insert(tk.END, str(msg)+"\n\n")
        T.see(tk.END)
        root.update()

def debug_log(msg):
    if DEBUG:
        print_log(msg)

if len(sys.argv) < 2:
    print "Usage: launcher <join-url>"
    sys.exit(1)

def center_window(window, offset_x=0, offset_y=0):
    window.withdraw()
    window.update_idletasks()  # update "requested size" from geometry manager
    x = (window.winfo_screenwidth() - root.winfo_reqwidth()) / 2 + offset_x
    y = (window.winfo_screenheight() - root.winfo_reqheight()) / 2 + offset_y
    window.geometry("+%d+%d" % (x, y))
    window.deiconify()

# run the command
def run_bash(cmd, pipe=PIPE):
    print_log("Running:\n" + cmd_data["cmd"] + "\n")

    if OS == 'windows':
        cmd_file = tempfile.gettempdir() + "/cmd.ps1"
        with open(cmd_file,"w") as f:
            f.write(cmd)
        cmd = "powershell -executionpolicy bypass -file " + cmd_file

    s = Popen(cmd,stdout=pipe,stdin=pipe,stderr=pipe,shell=True)
    output,error = s.communicate()
    debug_log("output:\n"+ output + "\n")
    debug_log("error:\n"+ error + "\n")
    debug_log("return code:\n"+ str(s.returncode))
    return output,error,s

def launcher_wrapper():
    try:
        launcher()
    except Exception as e:
        exc_type, exc_value, exc_traceback = sys.exc_info()
        print_log("".join(traceback.format_exception(exc_type, exc_value, exc_traceback)))

def launcher():
    global dl_data
    global cmd_data
    global OS

    # check platform
    p = platform.system()
    if p == "Darwin":
        OS = "macosx"
    elif p == "Linux":
        OS = "linux"
    elif p.startswith('Win'):
        OS = "windows"

    debug_log("OS detected as: " + OS)
    print_log("Version: " + VERSION)

    if OS == 'macosx': 
        import os
        os.system('''/usr/bin/osascript -e 'tell app "Finder" to set frontmost of process "Python" to true' ''')

    # check args
    join_url = sys.argv[1]

    debug_log("args: "  + str(sys.argv))
    join_url = join_url.replace('arena://','',1)
    items = join_url.split('/')
    game_id = items[0]
    params = {}
    for item in items[1:]:
        key, val = item.split('_',1)
        val = val.replace('%2F', '/')
        params.update({key:val})
    debug_log("params: " + str(params))
    sha1 = params["sha1"]
    del params['sha1']
    token = ""
    if "token" in params:
        token = params["token"]
        del params['token']

    # send back rest for customization
    rest = ""
    for key,val in params.items():
        rest += "&" + str(key) + "=" + str(val)

    # request the command
    req_url = API_ENDPOINT + "/cli/game/" + game_id + "/?os=" + OS + rest
    debug_log("request to " +  req_url)
    response = urllib2.urlopen(req_url)
    cmd_data = json.loads(response.read())
    debug_log(cmd_data)

    # check hash of command before run
    cmd_sha1 = hashlib.sha1(cmd_data['cmd']).hexdigest()
    if sha1 == cmd_sha1:
        print_log("Command hash is correct (sha1)")
    else:
        print_log("Incorrect command hash.")
        return

    if token:
        cmd_data['cmd'] = cmd_data['cmd'].replace('TOKEN_HERE', token, 1)

    output,error,s = run_bash(cmd_data["cmd"])

    # just quit if it's a lib error
    first_line = "".join(error.splitlines()[:1])
    if "No such file" in first_line or "cannot be run" in first_line:
        firstline = ""

    if first_line and "shared lib" in first_line: # dependency issue
        print_log(error)
    elif s.returncode != 0 or (OS == 'windows' and error): # not found
        print_log("Checking for download...")
        game_code = cmd_data["game_code"]

        req_url = API_ENDPOINT+"/cli/game-dl/"+game_code+"/?os="+OS
        debug_log("request to " +  req_url)
        response = urllib2.urlopen(req_url)
        dl_data = json.loads(response.read())

        # testing purposes
        #dl_data["dl_link"] = "https://file-examples.com/wp-content/uploads/2017/02/zip_2MB.zip"

        if dl_data["dl_link"]:
            ask_download()
        else:
            no_dl_available_quit()


    T.unbind("<Key>")
    T.bind("<Key>", anykey_exit)
    print_log("Hit any key to exit...")

def anykey_exit(event):
    key = event.char
    if key not in ['\x03','c','']: # allow copy text
        root.destroy()

def start_download():
    global dl_win, dl_data, pb, dl_active, run_after_dl
    dl_active = True
    request = urllib2.urlopen(dl_data['dl_link']);
    file_size = int(request.info().getheaders("Content-Length")[0]) 
    file_path = tempfile.gettempdir() + '/dl.zip'
    print_log("Downloading %s to %s" % (dl_data['dl_link'], file_path))
    file = open(file_path, 'wb')
    size = 0
    block_sz = 131072
    percentage = 0
    while True and dl_active:
        buffer = request.read(block_sz)
        if not buffer:
            break
        size += len(buffer)
        percentage = int(float(float(size) / float(file_size)) * 100)
        file.write(buffer)
        print "Downloading: " + str(percentage) + "%\t\t\r",
        sys.stdout.flush()

        pb["value"]=percentage
        dl_win.update()
    file.close()
    if percentage == 100:
        print_log("Download complete.") 
        zip_ref = zipfile.ZipFile(file_path, 'r')
        dest = os.path.expanduser("~") + "/games/"

        if OS == "macosx": 
            dest = "/Applications/games/"
        elif OS == "windows":
            dest = "c:/games/"

        try:
            os.makedirs(dest)
        except Exception as e:
            pass

        print_log("Unzipping to %s..." % dest)
        zip_ref.extractall(dest)
        zip_ref.close()
        print_log("Done.")
    else:
        print_log("Download canceled.")
    debug_log("run after: " + str(run_after_dl.get()))
    if run_after_dl.get():
        output,error,s = run_bash(cmd_data["cmd"])
        if s.returncode != 0 or (OS == 'windows' and error):
            print_log("Game not found.") 
    else:
        if dl_data["after_install"]:
            print_log("After Installation Notes")
            print_log(dl_data["after_install"])
            print_log("You can quit now and join again to see if dependencies are already met.")
    dl_win.quit()
    dl_win.destroy()

def cancel_download():
    global dl_active
    dl_active = False

def ask_download():
    global dl_data
    global dl_win
    global pb
    global run_after_dl
    request = urllib2.urlopen(dl_data['dl_link'])
    file_size = int(request.info().getheaders("Content-Length")[0]) 
    file_size_mb = "{0:.2f}".format(float(file_size)/1024.0/1024.0)
    result = tkMessageBox.askquestion("Download", "Game not found in any of expected directories, proceed to download and install? Download size: " + file_size_mb + " MB", icon='warning')
    if result == 'yes':
        dl_win = tk.Toplevel()
        dl_win.title("Downloading")
        # dl_win.geometry("300x110")
        s = ttk.Style()
        s.theme_use("default")
        s.configure("TProgressbar", thickness=20)
        pb = ttk.Progressbar(dl_win, orient="horizontal", length=200, mode="determinate")
        pb["value"]=0
        pb["maximum"]=100
        #pb.pack()
        pb.grid(row=0, column=0, pady=5, padx=50)

        run_after_dl = tk.IntVar()
        run_after_dl.set(0)
        if not dl_data["after_install"]:
            run_after = tk.Checkbutton(dl_win, variable=run_after_dl, text="Run after installation",  onvalue=1, offvalue=0) 
        else:
            run_after = tk.Label(dl_win, text="Please read dependency notes after the installation.")
        run_after.grid(row=1, column=0)


        cancel_button = ttk.Button(dl_win, text="Cancel", command=cancel_download)
        cancel_button.grid(row=2, column=0, pady=4)

        center_window(dl_win, offset_x=20, offset_y=60)
        dl_win.after(0, start_download) 
        dl_win.mainloop()

def no_dl_available_quit():
    tkMessageBox.showinfo("Manual installation needed", "Game not found in the expected location and universal zip is not available. You can install the game at it's official website.", icon='warning')
    sys.exit(0)

if __name__ == '__main__':
    root = tk.Tk()
    S = tk.Scrollbar(root)
    T = tk.Text(root, height=20, width=70)
    T["bg"] = "#000"
    T["fg"] = "#EDEFF1"
    S.pack(side=tk.RIGHT, fill=tk.Y)
    T.pack(side=tk.LEFT, fill=tk.Y)
    S.config(command=T.yview)
    T.config(yscrollcommand=S.set)
    T.bind("<Key>", lambda e: "break")
    center_window(root,0,-100)
    root.after(0, launcher_wrapper)
    root.title("arena.sh launcher")
    root.resizable(False, False)
    tk.mainloop()

